<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
        <title>2021年度春のパネル展示会</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel='stylesheet' href='/stylesheets/style.css' />
        <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
        <link rel="stylesheet" href="/stylesheets/swiper-bundle.min.css">
        <script src="/javascripts/jquery-3.5.1.min.js"></script>
    </head>
    <body class="container">
        <div class="account-container">
            <div class="menu-contents">
                <div class="items-container">
                    <div class="new-account-form">
                        <h3>作品情報変更</h3>
                        <label for="">イラスト</label>
                        <img src="" >
                        <font color = "red" >※イラストを変更したい場合は削除し、新規作成を行ってください。</font>
                        <label for="grade-select">回生</label>
                        <p class="err-msg" id="grade-err"></p>
                        <!-- //gradeは '1':'1回生', '2':'2回生', '3':'3回生', '4':'4回生', '5':'その他', '6':'合作'。 -->
                        <select name="grade" id="grade-select">
                            <option value="">選択してください</option>
                            <option value="1">１回生</option>
                            <option value="2">２回生</option>
                            <option value="3">３回生</option>
                            <option value="4">４回生</option>
                            <option value="5">その他</option>
                            <option value="6">合作</option>
                        </select>
                        <!-- //sizeは '1':'B4', '2':'B5', '3':'その他'。 -->
                        <label for="size-select">サイズ</label>
                        <p class="err-msg" id="size-err"></p>
                        <select name="size" id="size-select">
                            <option value="">選択してください</option>
                            <option value="1">B4</option>
                            <option value="2">B5</option>
                            <option value="3">その他</option>
                        </select>
                        <label for="title">作品名</label>
                        <p class="err-msg" id="title-err"></p>
                        <input class="text-input" type="text" name="title" id="title">
                        <label for="penname">ペンネーム</label>
                        <p class="err-msg" id="penname-err"></p>
                        <input class="text-input" type="text" name="penname" id="penname">
                        <label for="caption">説明文(150字以内)</label>
                        <p class="err-msg" id="caption-err"></p>
                        <textarea id="caption" type="text" maxlength="150" name="caption"></textarea>
                        <button id="submit-btn" class="btn">変更内容を更新して公開する</button>
                        <button class="btn delete-btn" id="delete">削除</button>
                        <button class="btn return-btn" id="return">戻る</button>
                    </form>
                </div>
            </div>
        </div>
        <!-- The core Firebase JS SDK is always required and must be listed first -->
        <script src="https://www.gstatic.com/firebasejs/8.4.3/firebase-app.js"></script>
        <script src="https://www.gstatic.com/firebasejs/8.4.3/firebase-storage.js"></script>
        <script src="https://www.gstatic.com/firebasejs/8.3.2/firebase-firestore.js"></script>
        <script src="https://www.gstatic.com/firebasejs/8.3.2/firebase-auth.js"></script>
        <script src="/javascripts/firebase_config.js"></script>
        <script>
//共通して必要な変数や値を設定。
var uid;
var imgUid;
var value;
const db = firebase.firestore();
const storage = firebase.storage();

const FIREBASE_DATA ={
    COLLECTION:{
        CRIENTS:'crients',
        IMGS:'imgs',
        USERS:'users',
    }
}

const VALIDATION = {
    GRADE:"回生を選択してください。",
    SIZE:"サイズを選択してください。",
    PENNAME:"ペンネームを入力してください。",
    TITLE:"タイトルを入力してください。",
    CAPTION:"説明文を入力してください。",
}
        </script>
         <script>
            firebase.auth().onAuthStateChanged(function(user) {
                if (user) {
                    console.log("There's a user");
                    thereUser();
                } else {
                    console.log("No user");
                    noUser();
                }
            });
        </script>
        <script>
        async function thereUser(){
            try {
                const queryObject = await getQueryObject();
                value = await getQueryValue( queryObject, 'value', '/login/account');
                uid = await firebase.auth().currentUser.uid;
                imgUid = `${uid}-${value}`;

                const imgData = await getStoreData('imgs',imgUid);
                await writeEditData(imgData);
                await getUserImg(imgUid,imageElement);
            } catch (err){
                console.log(err);
            }
        }
        async function noUser(){
            location.href = "/login";
        }

const submitButton = document.getElementById('submit-btn');
const deleteButton = document.getElementById('delete');

const gradeElement = document.getElementById('grade-select');
const sizeElement = document.getElementById('size-select');
const pennameElement = document.getElementById('penname');
const titleElement = document.getElementById('title');
const captionElement = document.getElementById('caption');
const imageElement = document.querySelector('img');

const gradeErrMsg = document.querySelector('#grade-err');
const sizeErrMsg = document.querySelector('#size-err');
const pennameErrMsg = document.querySelector('#penname-err');
const titleErrMsg = document.querySelector('#title-err');
const captionErrMsg = document.querySelector('#caption-err');

submitButton.addEventListener("click",()=>{
    console.log("click fileButton");
    //validationのメッセージを一度非表示にする。
    gradeErrMsg.innerText = "";
    sizeErrMsg.innerText = "";
    pennameErrMsg.innerText = "";
    titleErrMsg.innerText = "";
    captionErrMsg.innerText = "";
    //各inputのvalueを取得。
    const gradeValue = document.getElementById('grade-select').value;
    const sizeValue = document.getElementById('size-select').value;
    const pennameValue = document.getElementById('penname').value;
    const titleValue = document.getElementById('title').value;
    const captionValue = document.getElementById('caption').value;
    validation(gradeValue, sizeValue, pennameValue, titleValue, captionValue);
    const imgObject = {
        grade: gradeValue,
        size: sizeValue,
        penname: pennameValue,
        title: titleValue,
        caption: captionValue,
    };
    console.log("imgObject",imgObject);
    updateFunc(imgObject,FIREBASE_DATA.COLLECTION.IMGS,imgUid,'/login/account');
});

deleteButton.addEventListener("click",()=>{
    deleteFunc(value,uid,"/login/account/");
});

//account_edit固有　formに既存のデータを入力する。
function writeEditData(imgData){
    gradeElement.value = imgData.grade;
    sizeElement.value = imgData.size;
    pennameElement.value = imgData.penname;
    titleElement.value = imgData.title;
    captionElement.value = imgData.caption;
}

    function validation(gradeValue, sizeValue, pennameValue, titleValue, captionValue){
        var judge = 0;
        if(gradeValue==""){
            gradeErrMsg.innerText = VALIDATION.GRADE;
            judge++;
        }
        if(sizeValue==""){
            sizeErrMsg.innerText = VALIDATION.SIZE;
            judge++;
        }
        if(pennameValue==""){
            pennameErrMsg.innerText = VALIDATION.PENNAME;
            judge++;
        }
        if(titleValue==""){
            titleErrMsg.innerText = VALIDATION.TITLE;
            judge++;
        }
        if(captionValue==""){
            captionErrMsg.innerText = VALIDATION.CAPTION;
            judge++;
        }
        if(judge!=0)throw Error("Validation!!");
    }
        </script>

        <script>//共通関数

//クエリパラメータを取得、オブジェクトとして返す。
function getQueryObject(){
    var queryString = window.location.search;
    var queryObject = new Object();
    if(queryString){
        queryString = queryString.substring(1);
        var parameters = queryString.split('&');

        for (var i = 0; i < parameters.length; i++) {
            var element = parameters[i].split('=');
            var paramName = decodeURIComponent(element[0]);
            var paramValue = decodeURIComponent(element[1]);
            queryObject[paramName] = paramValue;
        }
    }
    return queryObject;
}

    //queryObjectから特定のvalueを取得する　loseURLとはvalueが存在しなかった場合の遷移先を指す。
    function getQueryValue( queryObject, key, loseURL){
        if(queryObject[key]){
            return queryObject[key];
        }else{
            console.log(`No ${key}`);
            location.href=loseURL;
        }
    }

    //画像の取得から反映まで行います。
function getUserImg(imgUid,element){
    var storageRef = storage.ref();
    console.log('imgUid',imgUid);
    storageRef.child('imgs/'+imgUid+".jpg").getDownloadURL().then(function(url) {
        //エレメントに画像を反映
        element.src = url;
    }).catch((error) => {
        // Handle any errors
        console.log("err >>>",error);
    });
}
async function getStoreData(collection,doc){
            const storeRef = db.collection(collection).doc(doc);
            const storeData = await storeRef.get();
            if(await storeData.exists){
                return storeData.data();
            }else{
                throw new Error(`No such document! collection= ${collection}, doc= ${doc}`);
            }
        }

//delete時
async function deleteFunc(value, uid, goalURL) {
            if (await window.confirm("一度削除したイラスト情報は元に戻りません。削除してもよろしいでしょうか？")) {
                try{
                    const imgUid = `${uid}-${value}`;
                    await deleteStoreDocument('imgs',imgUid);
                    await deleteStoreDocument('crients',imgUid);
                    await deleteStoreField('users',uid,value);
                    await deleteStorageFile(imgUid);
                    console.log("delete function all complete!");
                    location.href = goalURL;
                }catch(err){
                    console.log('deleteFunc Err',err);
                }
            }
        }
        //firestoreでdocumentを削除する
        function deleteStoreDocument(collection,imgUid){
            var storeRef = db.collection(collection).doc(imgUid);
            return storeRef.delete();
        }

        //firestoreでfieldを削除する
        function deleteStoreField(collection, uid, value) {
            var storeRef = db.collection(collection).doc(uid);
            return storeRef.update({
                [`img${value}`]: firebase.firestore.FieldValue.delete(),
            });
        }

        //firestorageでファイルを削除する。
        function deleteStorageFile(imgUid){
            var storageRef = storage.ref();
            return storageRef.child(`imgs/${imgUid}.jpg`).delete();
        }

//データを書き換える際の関数。
async function updateFunc(object, collection, imgUid, goalURL){
    try{
        const imgUid = await `${uid}-${value}`;
        await dataUpdate(object,collection, imgUid)
        location.href= goalURL;
    }catch(err){
        console.log('updateFunc Err',err);
    }
}

//firestoreでupdate処理をする。
function dataUpdate(object,collection,document){
    const imgsRef = db.collection(collection).doc(document);
    return imgsRef.update(object);
}
        </script>
    </body>
</html>