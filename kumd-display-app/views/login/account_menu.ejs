<!DOCTYPE html>
<html lang="ja">

<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <title>2021年度春のパネル展示会</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/stylesheets/style.css" />
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" />
    <link rel="stylesheet" href="/stylesheets/swiper-bundle.min.css" />
    <script src="/javascripts/jquery-3.5.1.min.js"></script>
</head>

<body class="container">
    <input id="change" class="change-check" type="checkbox" />
    <div class="account-menu-wrapper">
        <div class="account-menu-header">
            <div class="header-content">
                <button id="logout" class="btn">ログアウト</button>
                <button id="change-comment" class="btn">
            <label for="change">コメント</label>
          </button>
                <button id="change-edit" class="btn">
            <label for="change">編集</label>
          </button>
            </div>
        </div>
        <div class="account-menu-container">
            <div class="account-menu-contents" id="templete-content"></div>
        </div>
    </div>
    <!-- テンプレート -->
    <template id="account-menu-items-tem">
      <div class="register-content">
        <div class="account-img-content">
          <div class="in-shadow"></div>
          <img class="account-img" src="" />
        </div>
        <div class="account-contents">
          <button class="edit btn" value="">編集</button>
          <button class="delete btn" value="">削除</button>
          <button class="comment btn" value="">コメント</button>
        </div>
      </div>
    </template>
    <template id="new-register-tem">
      <div class="register-content">
        <div class="account-img-content">
          <div class="in-shadow"></div>
          <div class="fa fa-plus-circle"></div>
        </div>
        <div class="account-contents">
          <button class="btn register-btn" id="new-register">新規作成</button>
        </div>
      </div>
      <div class="content-no"></div>
    </template>
    <!-- The core Firebase JS SDK is always required and must be listed first -->
    <script src="https://www.gstatic.com/firebasejs/8.4.3/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.4.3/firebase-storage.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.3.2/firebase-firestore.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.3.2/firebase-auth.js"></script>
    <script src="/javascripts/firebase_config.js"></script>
    <script>
        var uid;
        const fragment = document.createDocumentFragment();
        const db = firebase.firestore();
        const storage = firebase.storage();
    </script>
    <script>
        firebase.auth().onAuthStateChanged(function(user) {
            if (user) {
                console.log("There's a user");
                thereUser();
            } else {
                console.log("No user");
                noUser();
            }
        });
    </script>
    <script>
        async function thereUser(){
            uid = await firebase.auth().currentUser.uid;
            try {
                const userData = await getStoreData('users',uid);
                const userValData = await validateUsersData(userData);
                await madePaintItems(userValData);
                await clickBtn();
            } catch (err){
                console.log(err);
            }
        }
        async function noUser(){
            location.href = "/login";
        }

        //firestoreからデータを取得する。
        async function getStoreData(collection,uid){
            const userRef = db.collection(collection).doc(uid);
            const doc = await userRef.get();
            if(await doc.exists){
                return await doc.data();
            }else{
                throw new Error(`No such document! collection= ${collection}, uid= ${uid}`);
            }
        }

        //collectonがusersの際のvalidation
        function validateUsersData(data){
            var usersData = data;
            delete usersData.imgNum;
            usersData = getDecSort(usersData);
            return usersData;
        }

        //テンプレートからイラストごとに要素を生成。(login固有の関数)
        function madePaintItems(data) {
            const templeteContent = document.getElementById("templete-content");
            const itemsContent = document.querySelector("#account-menu-items-tem").content;
            const registerContent = document.querySelector("#new-register-tem").content;
            for (const property in data) {
                const clone = document.importNode(itemsContent, true);

                const image = clone.querySelector("img");
                const editBtn = clone.querySelector(".edit");
                const deleteBtn = clone.querySelector(".delete");
                const commentBtn = clone.querySelector(".comment");

                //ファイアーベースから画像を取得また要素に反映。
                //getAndReflectUserImg(data[property],image);

                const getNum = data[property].split("-")[1];
                editBtn.value = getNum;
                deleteBtn.value = getNum;
                commentBtn.value = getNum;
                fragment.appendChild(clone);
            }
            const check = document.importNode(registerContent, true);
            fragment.appendChild(check);
            templeteContent.appendChild(fragment);
        }
        //ログアウトボタンや編集ボタンなどが押された際にどのような挙動をするかを決める。(login固有の関数)
        function clickBtn() {
            const registerButton = document.getElementById("new-register");
            const logoutButton = document.getElementById("logout");
            const editButton = $(".edit");
            const deleteButton = $(".delete");
            const commentButton = $(".comment");

            editButton.on("click", function() {
                const editValue = $(this).attr("value");
                console.log("edit", editValue);
                location.href = `/login/account/edit?value=${editValue}`;
            });

            deleteButton.on("click", function() {
                const deleteValue = $(this).attr("value");
                console.log("delete", deleteValue);
                deleteFunc(deleteValue, uid);
            });

            commentButton.on("click", function() {
                const commentValue = $(this).attr("value");
                console.log("comment", commentValue);
            });

            registerButton.addEventListener("click", () => {
                location.href = `/login/account/new`;
            });

            logoutButton.addEventListener("click", () => {
                console.log("logout!");
                logout();
            });
        }

        //logout(login固有の関数)
function logout(){
    firebase.auth().signOut().then(()=>{
          console.log("ログアウトしました");
          location.href = `/login`;
        })
        .catch( (error)=>{
          console.log(`ログアウト時にエラーが発生しました (${error})`);
        });
}
    </script>
    <script>
        //クエリパラメータを取得し、オブジェクトとして返す。
        function getQueryObject() {
            var queryString = window.location.search;
            var queryObject = new Object();
            if (queryString) {
                queryString = queryString.substring(1);
                var parameters = queryString.split("&");

                for (var i = 0; i < parameters.length; i++) {
                    var element = parameters[i].split("=");
                    var paramName = decodeURIComponent(element[0]);
                    var paramValue = decodeURIComponent(element[1]);
                    queryObject[paramName] = paramValue;
                }
            }
            return queryObject;
        }

        //画像の取得から反映まで行います。
        function getAndReflectUserImg(imgUid, element) {
            const storageRef = storage.ref();
            console.log("imgUid", imgUid);
            storageRef.child("imgs/" + imgUid + ".jpg").getDownloadURL()
            .then(function(url) {
                    //エレメントに画像を反映
                    element.src = url;
                })
                .catch((err) => {
                    // Handle any errors
                    console.log("getAndReflectUserImgErr", err);
                });
        }
        // オブジェクトのキーの順番に並び替える。
        function getDecSort(object) {
            var pairs = Object.entries(object);
            pairs.sort(function(p1, p2) {
                var p1Key = parseInt(p1[0].replace(/[^0-9]/g, ""));
                var p2Key = parseInt(p2[0].replace(/[^0-9]/g, ""));
                if (p1Key < p2Key) return -1;
                if (p1Key > p2Key) return 1;
                return 0;
            });
            return Object.fromEntries(pairs);
        }

        //delete時
        async function deleteFunc(value, uid) {
            if (await window.confirm("一度削除したイラスト情報は元に戻りません。削除してもよろしいでしょうか？")) {
                try{
                    const imgUid = `${uid}-${value}`;
                    await deleteStoreDocument('imgs',imgUid);
                    await deleteStoreDocument('crients',imgUid);
                    await deleteStoreField('users',uid,value);
                    await deleteStorageFile(imgUid);
                    console.log("delete function all complete!");
                    location.href = "/login/account/";
                }catch(err){
                    console.log('deleteFunc Err',err);
                }
            }
        }
        //firestoreでdocumentを削除する
        function deleteStoreDocument(collection,imgUid){
            var storeRef = db.collection(collection).doc(imgUid);
            return storeRef.delete();
        }

        //firestoreでfieldを削除する
        function deleteStoreField(collection, uid, value) {
            var storeRef = db.collection(collection).doc(uid);
            return storeRef.update({
                [`img${value}`]: firebase.firestore.FieldValue.delete(),
            });
        }

        //firestorageでファイルを削除する。
        function deleteStorageFile(imgUid){
            var storageRef = storage.ref();
            return storageRef.child(`imgs/${imgUid}.jpg`).delete();
        }
    </script>
</body>

</html>